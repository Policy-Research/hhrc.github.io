/* ================================================================
MIXINS - TYPE
================================================================ */

// Version:         2.0.0

// Changes:         2.0.1 | change "t-" to "type-" for classes and
//                  variables. Reworked the line-height so that 
//                  you can use relative (unitless)

// Note: We cannot use the same mixin for keywords because mixins 
//       ie .create vs .createSize are matched based on number of 
//       arguments see https://github.com/less/less.js/issues/1355

#TYPE() {
  .breakWord() {
    -ms-word-break: normal;
    word-break: normal;
    word-break: break-word;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    hyphens: auto;
  }
  .breakAll() {
    -ms-word-break: break-all;
    word-break: break-all;
    word-break: break-word;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    hyphens: auto;
  }
  // No Parameter (base)
  .create() {
    #TYPE.create(
      @size: @t-base, 
      @lh: @type-line-height, 
      @size-small: @type-break--base, /*if((@type-breakpoint-output), @type-break--base, false) */
      @lh-small: @type-break--base-lh,
      @margin: true
    );
  }
  // All options (manual)
  .create(
    @size, 
    @lh: false,
    @size-small: false,
    @lh-small: false,
    @family: @type-family, 
    @with-p: false,
    @margin: false,
    @breakpoint: @type-breakpoint
  ) {

    font-family: @family;

    & when not (@type-use-rem) {
      font-size: @size;
    }
    & when (@type-use-rem) {
      #TYPE.rem(@size);
    }
    & when not (@lh = false) {
      @normalized-lh: #TYPE._calcEmIfPixel(@size, @lh)[];
      @em: unit(@normalized-lh, em);

      line-height: @normalized-lh;
      & when (@margin = true) {
        margin-bottom: @em * @type-margin-multiplier;
      }
      // Add a paragraph selector (used to style whole blocks)
      p when not (@with-p = false ) {
        & when not (@type-use-rem) {
          font-size: @size;
        }
        & when (@type-use-rem) {
          #TYPE.rem(@size);
        }
        line-height: @normalized-lh;
        margin-bottom: @em * @type-margin-multiplier;
      }
    }
    
    // Small Size
    & when not (@size-small = false) {
      @media @breakpoint {
        & when not (@type-use-rem) {
          font-size: @size-small;
        }
        & when (@type-use-rem) {
          #TYPE.rem(@size-small);
        }
        & when not (@lh-small = false) {
          @normalized-lh: #TYPE._calcEmIfPixel(@size-small, @lh-small)[];
          @em: unit(@normalized-lh, em);

          line-height: @normalized-lh;
          & when (@margin = true) {
            margin-bottom: @em * @type-margin-multiplier;
          }
          p when not (@with-p = false ) {
            line-height: @normalized-lh;
            margin-bottom: @em * @type-margin-multiplier;
            & when not (@type-use-rem) {
              font-size: @size-small;
            }
            & when (@type-use-rem) {
              #TYPE.rem(@size-small);
            }
          }
        }
      }
    }
  }
  // By Keyword
  .createSize(@keyword, @margin: false, @with-p: false) {
    & when (@keyword = "base") or (@keyword = "medium") {
      #TYPE.create(
        @size: @t-base, 
        @lh: @type-line-height, 
        @size-small: @type-break--base, /*if((@type-breakpoint-output), @type-break--base, false) */
        @lh-small: @type-break--base-lh,
        @margin: @margin,
        @with-p: @with-p
      );
    }
    & when (@keyword = "small-x") {
      #TYPE.create(
        @size: @type-small-x, 
        @lh: @type-small-x-lh, 
        @size-small: @type-break--small-x, /*if((@type-breakpoint-output), @type-break--small-x, false) */
        @lh-small: @type-break--small-x-lh,
        @margin: @margin,
        @with-p: @with-p
      );
    }
    & when (@keyword = "small") {
      #TYPE.create(
        @size: @type-small, 
        @lh: @type-small-lh, 
        @size-small: @type-break--small, /*if((@type-breakpoint-output), @type-break--small, false) */
        @lh-small: @type-break--small-lh,
        @margin: @margin,
        @with-p: @with-p
      );
    }
    & when (@keyword = "large") {
      #TYPE.create(
        @size: @type-large, 
        @lh: @type-large-lh, 
        @size-small: @type-break--large, /*if((@type-breakpoint-output), @type-break--large, false) */
        @lh-small: @type-break--large-lh,
        @margin: @margin,
        @with-p: @with-p
      );
    }
    & when (@keyword = "large-x") {
      #TYPE.create(
        @size: @type-large-x, 
        @lh: @type-large-x-lh, 
        @size-small: @type-break--large-x, /*if((@type-breakpoint-output), @type-break--large-x, false) */
        @lh-small: @type-break--large-x-lh,
        @margin: @margin,
        @with-p: @with-p
      );
    }
    & when (@keyword = "large-xx") {
      #TYPE.create(
        @size: @type-large-xx, 
        @lh: @type-large-xx-lh, 
        @size-small: @type-break--large-xx, /*if((@type-breakpoint-output), @type-break--large-xx, false) */
        @lh-small: @type-break--large-xx-lh,
        @margin: @margin,
        @with-p: @with-p
      );
    }
  }  
  .emLineHeight(@font-size, @lh) {
    & when (get-unit(@lh) = em) {
      line-height: @lh;
    }
    & when (get-unit(@lh) = px) {
      line-height: unit((@lh / @font-size), em);
    }
  }
  .preWrap() {
    white-space: pre-wrap; /* css-3 */
    white-space: -moz-pre-wrap; /* Mozilla, since 1999 */
    white-space: -pre-wrap; /* Opera 4-6 */
    white-space: -o-pre-wrap; /* Opera 7 */
    word-wrap: break-word; /* Internet Explorer 5.5+ */
  }
  .rem(@font-size) {
    font-size: @font-size;
    font-size: unit((@font-size / @t-base), rem);
  }
  .shadowBorder(@color, @border-size) {
    text-shadow: -@border-size -@border-size 0 @color, @border-size -@border-size 0 @color, -@border-size @border-size 0 @color, @border-size @border-size 0 @color;
  }
  .improveQuality() {
    // Improves text quality, use only when needed.
    text-rendering: optimizelegibility;
    -moz-osx-font-smoothing: grayscale;
  }
  .fontFace(@name, @family, @folder: "fonts") {
    & when (@toggle-simple-paths = off) { 
      @charset "UTF-8";
      @font-face {
        font-family: "@{family}";
        src:url("@{site-theme-path}/@{folder}/@{name}.eot?v=@{i-suffix}");
        src:url("@{site-theme-path}/@{folder}/@{name}.eot?#iefix&v=@{i-suffix}") format("embedded-opentype"),
          url("@{site-theme-path}/@{folder}/@{name}.woff?v=@{i-suffix}") format("woff"),
          url("@{site-theme-path}/@{folder}/@{name}.ttf?v=@{i-suffix}") format("truetype"),
          url("@{site-theme-path}/@{folder}/@{name}.svg#@{name}&v=@{i-suffix}") format("svg");
        font-weight: normal;
        font-style: normal;
      }
    }
    & when (@toggle-simple-paths = on) { 
      @charset "UTF-8";
      @font-face {
        font-family: "@{family}";
        src:url("../@{folder}/@{name}.eot?v=@{i-suffix}");
        src:url("../@{folder}/@{name}.eot?#iefix&v=@{i-suffix}") format("embedded-opentype"),
          url("../@{folder}/@{name}.woff?v=@{i-suffix}") format("woff"),
          url("../@{folder}/@{name}.ttf?v=@{i-suffix}") format("truetype"),
          url("../@{folder}/@{name}.svg#@{name}&v=@{i-suffix}") format("svg");
        font-weight: normal;
        font-style: normal; 
      }
    } 
  } 
  // Internal mixin used in create mixin
  ._calcEmIfPixel(@font-size, @size) {
    & when (ispixel(@size) = true) {
      return: #CALC.em(@font-size, @size)[];
    }
    return: @size;
  }
}







