// =============================================================================
// NODE SCRIPT: Creates Module Imports
// =============================================================================


// Version:         1.0.6

// Description:     Script responsible for all internal core stuff for gulp.
//                  Including the module import system and the paths.
//                  The gulp script passes this module the base directory (__dirname)
//                  and the user's less path, which is used to pass back:
//                  - Paths for the less compiler to use
//                  - Function for modules to be added to less task in gulp

// Exports:         A function to be called in the gulp script. That function will 
//                  create/return an object to be used in the gulp file. 

// Changes:         1.0.4 | Fixed typo javscript --> javascript
//                  1.0.5 | Added some extra paths outputs for the compiler module
//                  1.0.6 | Changed icon mixin to match updated framework mixin args

module.exports = function(lessOptions) {

  // Setup
  // ===========================================================================

  const returns  = {},
        baseDir = lessOptions.baseDir; // Object to add returned interface to (like "exports")


  // Dependencies
  // ===================================

  const fs = require('fs'),
        path = require('path'),
        requireNoCache = require('require-no-cache')(require),
        tags = lessOptions.rootRequire('common-tags'),
        dependencyOrder = requireNoCache('dependency-order')(lessOptions),                   
        multiString = require('multi-line-strings'),
        debug = requireNoCache('debug-messages')(lessOptions);  


  // Path Setup 
  // ===================================

  // Description:     Paths used internally in module and some passed back to  
  //                  the gulp script. 

  const lessCore = path.resolve(baseDir, lessOptions.pathCore),
        lessSite = path.resolve(baseDir, lessOptions.pathSite),
        lessPaths = returns.paths = {
          "core" : lessCore,
          "site" : lessSite,
          "stylesheet" : path.join(lessCore, 'init', 'stylesheet.less'),
          "ouputStyles" : path.join(lessCore, 'init', lessOptions.id + '.less'),
          "ouputWysiwyg" : path.join(lessCore, 'init', lessOptions.id + '.wysiwyg.less'),
          "init" : path.join(lessCore, 'init'),
          "modules" : path.join(lessCore, 'modules'),
          "moduleImports" : path.join(lessSite, 'modules', '_imports.less'),
          "iconMixins" : path.join(lessCore, 'init', 'icons.less'),
          "siteModules" : path.join(lessSite, 'modules'),
          "siteConfig" : path.join(lessSite, "_config.js"),
          "nodeModules" : path.join(lessCore, "node_modules"),
          "javascript" : path.resolve(baseDir, lessOptions.pathJavascript)
        };   


  // Path settings for gulp tasks
  // - resolve: Used by less compiler "path" prop
  // - watch: Paths to be watched (in gulp)
  returns.pathList = {
    resolve: [
      lessPaths.site, 
      lessPaths.core, 
    ],
    // this is for gulp blobs
    watch: [
      path.join(lessPaths.site, '**/*.less'), 
      path.join(lessPaths.site, '**/*.js'), 
      path.join(lessPaths.core, '**/*.less'), 
      path.join(lessPaths.core, '**/*.js'), 
      path.join('!', lessPaths.moduleImports),
      path.join('!', lessPaths.iconMixins),
      path.join('!', lessPaths.site, '_default.vars.less')
    ],
    stylesheet: lessPaths.stylesheet,
    site: lessPaths.site,
    core: lessPaths.core,
    watchIgnore: [
      path.join(lessPaths.iconMixins),
      path.join(lessPaths.site, '_default.vars.less'),
      lessPaths.moduleImports
    ],
    watchGlob: [
      path.join(lessPaths.site, '**/*.less'), 
      path.join(lessPaths.site, '**/*.js'), 
      path.join(lessPaths.core, '**/*.less'), 
      path.join(lessPaths.core, '**/*.js'), 
    ]
  };

  // Filenames to output
  returns.filename = {
    styles: path.join(lessOptions.id + '.css'),
    wysiwyg: path.join(lessOptions.id + '.wysiwyg.css')
  };
  

  // Internal Utility Functions
  // ===================================

  function addExtension(name) {
    return name.endsWith(".less") ? name : name + ".less";
  }
  function addExtensionJS(name) {
    return name.endsWith(".js") ? name : name + ".js";
  }
  function removeExtension(name) {
    return name.endsWith(".less") ? name.substring(0, name.length - 5) : name;
  }
  function isModFile(file) { 
    return file.charAt(0) !== "_" && file.charAt(0) !== ".";
  }


  // Templates
  // ===========================================================================

  const template = {
    moduleLessImport: function(moduleName, lessFile) {
      lessFile = addExtension(lessFile);
      return `@import (optional) "modules/${ moduleName }/${ lessFile }";`;
    },
    fileModuleImports: function(imports) {
      return tags.stripIndent`
        // =============================================================================
        // Module Imports
        // =============================================================================

        // NOTE: THIS IS A DYNAMICALLY GENERATED FILE. DO NOT EDIT.

        // This file is created by LESS node script. It is all the imports for the 
        // required modules for the site.

        ${ multiString.indent(imports, 8) }
      `;
    },
    fileIcons: function(hooks, mixins) {
      return tags.stripIndent`
        // =============================================================================
        // Icon Mixin File
        // =============================================================================

        // NOTE: THIS IS A DYNAMICALLY GENERATED FILE. DO NOT EDIT.

        // This file is created by LESS node script. It contains the hooks for the
        // icon mixin. Optionally it creates class mixins for each icon.

        #ICON() {
          .create(@name, @defaults: true) {
            ${ multiString.indent(hooks, 10) }
          }
        }
        

        // Icon class mixins
        & when (@icons--create-classes = true) {
          ${ multiString.indent(mixins, 10) }
        }
      `;
    },
    fileModuleComment: function(moduleObj) {
      return tags.stripIndent`
        /*
        ================================================================================
        Module: ${ moduleObj.name }
        ================================================================================

        Version:            ${ moduleObj.version ? moduleObj.version : "None" }

        Description:        ${ moduleObj.description ?  moduleObj.description : "None" }

        */
      `;
    },
    fileBlankSiteOverrides: function(moduleObj) {
      return tags.stripIndent`
      
        // =============================================================================
        // Site Overrides (vars.less)
        // =============================================================================

        // There are no variables for this module:
        
        // Module Name:        ${ moduleObj.name }
        
      `;
    },
    fileJavascriptIncludes: function(includes) {
      return tags.stripIndent`
      
        // =============================================================================
        // Javascript - LESS Framework
        // =============================================================================
        
        // NOTE: THIS IS A DYNAMICALLY GENERATED FILE. DO NOT EDIT.

        // This file is a contcatoned version of any javascript that was included by a 
        // LESS module.
        
        ${ multiString.indent(includes, 8) }
        
      `;
    },
  };


  // Scripts
  // ===========================================================================

  // Path error prevention
  // ===================================

  returns.checkPaths = function() {
    debug.message('Checking path configuration...');
    if (!fs.existsSync(lessCore)) debug.error('The gulp-config.js LESS core path is incorrect. Currently set to ', lessCore, 'CSS and modules could not be loaded.');
    if (!fs.existsSync(lessSite)) debug.error('The gulp-config.js LESS site path is incorrect. Currently set to ', lessSite, 'CSS and modules could not be loaded.');
    if (!fs.existsSync(lessPaths.init)) debug.error('Unable to find core init folder at:', lessPaths.init);
    if (!fs.existsSync(lessPaths.siteConfig)) debug.error('No _config.js file found in site. CSS and modules could not be loaded.');
    debug.memory(process, 'End checkPaths()...');
    return (fs.existsSync(lessCore) && fs.existsSync(lessSite) && fs.existsSync(lessPaths.siteConfig));
  };



  // Module System
  // ===================================

  // Description:     This script runs before less is parsed and creates a
  //                  file of less imports for each module needed (dependencies)
  
  returns.modulesInit = function() {

    debug.message('Getting requirements...');
    debug.memory(process, 'Start modulesInit()...');
    debug.time();

    // Gather Site Info & Files
    // =====================================
    
    const modulesFolder = path.join(lessPaths.modules),
          names = fs.readdirSync(modulesFolder).filter(isModFile),
          siteConfig = requireNoCache(lessPaths.siteConfig),
          siteRequire = siteConfig.require || false,
          siteExclude = siteConfig.exclude || false,
          modules = {
            _length: 0
          },
          siteModules = {},
          imports = [],
          javascriptIncludes = [];


    // Local Utility Functions
    // ---------------------------------

    function makeArray(obj, prop) {
      if (obj[prop] && obj[prop] === 'string') obj[prop] = [obj[prop]];
    }
    function isExcluded(name, filename) {
      var excludes = siteExclude ? siteExclude[name] : false;
      if (typeof excludes === "string") excludes = [excludes]; // Format as array if malformed
      if (excludes) {
        if (excludes.includes(addExtension(filename))) return true;
        if (excludes.includes(removeExtension(filename))) return true;
      } else {
        return false;
      }
    }
    // Check site config for exclude and if not add an import line
    function addImport(name, filename) {
      if (!isExcluded(name, filename)) imports.push(template.moduleLessImport(name, filename));
    }

    function copyFileModule(moduleObj, siteDir, filename, filenameSite = 'default.' + filename, force = false) {

      var pathFile = path.join(moduleObj._path, addExtension(filename)),
          pathFileSite = path.join(siteDir, addExtension(filenameSite)),
          fileContent = fs.existsSync(pathFile) ? fs.readFileSync(pathFile) : false;
      
      // If file has content and the site's folder doesn't have this file   
      
      if (!fs.existsSync(pathFileSite)) {
        if (fileContent) {
          fs.writeFileSync(pathFileSite, multiString.commentAllLines(fileContent.toString())); // Make default styles
        } else if (force) {
          fs.writeFileSync(pathFileSite, template.fileBlankSiteOverrides(moduleObj));
        }
      }
    }
    // Function used to add javascript includes as one concatonated file
    function addJavascript(moduleObj, dir, filename) {
      var pathFile =  path.join(moduleObj._path, addExtensionJS(filename));
      if (fs.existsSync(pathFile)) {
        javascriptIncludes.push(fs.readFileSync(pathFile).toString());
      } else {
        debug.warning('Module (' + moduleObj.name + ') included javascript file (' + addExtensionJS(filename) + ') not found.');
      }
    }

    // Clone Global Vars to Site
    // -------------------------------------

    const siteVarsPath = path.join(lessPaths.init, 'vars.less');

    if (fs.existsSync(siteVarsPath)) {
      var siteVarsFile = fs.readFileSync(siteVarsPath).toString();
      fs.writeFileSync(path.join(lessPaths.site, '_default.vars.less'), multiString.commentAllLines(siteVarsFile));
    }


    // Start Script - Modules
    // ---------------------------------
    
    if (!siteRequire) return debug.warning('This site _config requires no modules?'); // No modules used quit script
    makeArray(siteConfig, "require"); // Make sure require is formatted correctly

    // Collect all modules information
    names.forEach(name => {
      var folder = path.join(modulesFolder, name),
          lessModulePath = path.join(folder, '_module.js');

      
      // Only considered a module if there is a config 
      // and not hidden file or beginning with "_"
      if (fs.existsSync(lessModulePath)) {
        var pathVars = path.join(folder, 'vars.less'),
            pathMixins = path.join(folder, 'mixins.less'),
            pathStyles = path.join(folder, 'styles.less'),
            moduleObj = requireNoCache(lessModulePath),
            fileInfo = {
              name: name,
              _path: path.join(folder)
            };

        // Check formatting of array props
        makeArray(moduleObj, "import");
        makeArray(moduleObj, "require");
        makeArray(moduleObj, "javascript");
        moduleObj = modules[name] = Object.assign(fileInfo, moduleObj);
        ++modules._length;
      } else {
        debug.warning('Confirm the configuration file for the following module exists and follows our naming standards of a module. Module:', name, 'Location:', folder);
      }
    });

    // Only continue if modules were found
    if (modules._length) {
 
      debug.message('Determining site module dependencies...');

      // Determine Dependencies and Output Import File
      var order = dependencyOrder(siteRequire, modules, true); // Get the order

      if (order.length) {
        debug.listOrdered('Modules loaded: ', order);
        debug.message('Creating LESS module imports...');
        // Create order imports
        order.forEach(name => {
          imports.push("\n" + template.fileModuleComment(modules[name]) + "\n");
          addImport(name, 'vars');
          addImport(name, 'mixins');
          addImport(name, 'styles');
          if (modules[name].import) {
            modules[name].import.forEach(filename => addImport(name, filename));
          }
          // At the end to override any styles
          addImport(name, 'site-overrides');                                    
        });

        // Make directory if not existing
        if (!fs.existsSync(lessPaths.siteModules)) fs.mkdirSync(lessPaths.siteModules); 
        // Make less import file
        fs.writeFileSync(lessPaths.moduleImports, template.fileModuleImports(imports.join("\n")));
        // Create the site module folder
        debug.message('Setting up site modules folder...');
        // Make files
        order.forEach(name => {

          var dir = path.join(lessPaths.siteModules, name),
              moduleObj = modules[name];

          // Check if folder exists for module
          if (!fs.existsSync(dir)) fs.mkdirSync(dir); 

          // Create files
          copyFileModule(moduleObj, dir, 'vars', 'site-overrides', true);
          copyFileModule(moduleObj, dir, 'styles');

          // Create files for all imports as well
          if (moduleObj.import) {
            moduleObj.import.forEach(filename => {
              copyFileModule(moduleObj, dir, filename);
            });
          }

          // Check if they wanted to include JS
          if (moduleObj.javascript) {
            moduleObj.javascript.forEach(filename => {
              addJavascript(moduleObj, dir, filename);
            });
            
          }
        });

        // Write the javascript file
        var newJS = template.fileJavascriptIncludes(javascriptIncludes.join("\n")),
            oldJS = fs.readFileSync(lessPaths.javascript).toString();

        // Check if changes were made
        if (newJS !== oldJS)  {
          debug.message('Updating javascript includes');
          fs.writeFileSync(lessPaths.javascript, newJS);
        }
      }
      debug.required('Finished');
    } else {
      debug.error('No modules were found in less core?');
    }
    debug.timeEnd();
    debug.memory(process, 'End modulesInit()...');
  };


  // Icon Font Setup
  // ===================================

  // Description:     This script gets fed the ouput from the icon font generator.
  //                  It's job is to make the icon less mixin file.

  returns.iconsFontInit = function(glyphs, options) {

    debug.message('Creating icon font mixins...');
    debug.memory(process, 'Start iconsFontInit()...');

    // Run through templates
    const hooks = glyphs.map(glyph => {
      var glyphCode = glyph.unicode[0].charCodeAt(0).toString(16).toUpperCase();
      return `& when (@name = '${ glyph.name }') { content: '\\${ glyphCode }'; }`;
    });
    const mixins = glyphs.map(glyph => {
      return `#ICON.createClass('${ glyph.name }');`; 
    });

    hooks.unshift(""); // Add empty line for indenting
    mixins.unshift(""); // Add empty line for indenting

    // Output file in file template
    if (fs.existsSync(lessPaths.init)) {
      fs.writeFileSync(lessPaths.iconMixins, template.fileIcons(hooks.join(" \n"), mixins.join(" \n")));
    } else {
      debug.error('Cannot create icons.less for icon font. The core/init folder missing or paths are not configured.');
    }

    debug.memory(process, 'End iconsFontInit()...');
  };
  
  debug.memory(process, 'Init of lessFramework()...');
  return returns; // This is the object used in gulp
};
