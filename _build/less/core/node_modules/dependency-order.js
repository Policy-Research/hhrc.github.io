module.exports = function(lessOptions) {

  const debug = require('debug-messages')(lessOptions),
        chalk = lessOptions.rootRequire('chalk');

  return function(list, library, allowCircular = true) {

    var checked = [],
        order = [],
        error = false,
        trace = [],
        depth = 1; 
    
    if (!Array.isArray(list)) list = [list];

    // Start checking
    for (var i = 0; i < list.length; i++) {
      checkRequired(list[i]);
      if (error) break; // End loop
      trace.length = 0; // Clear trace array
      depth = 1;
    }
    
    // Internal Functions
    // =====================================

    // Recursive function that actually checks dependents
    function checkRequired(item) {
      if (error) return;
      if (!library.hasOwnProperty(item)) return errorMissing(item, depth);
      trace.push(depth + " | " + item.toString());
      var required = library[item].require;
      
      // This dependent has been added
      if (order.includes(item)) {
        return;
        
      // If the item has already been run through 
      // Meaning circular dependency (a dependent requires the parent)
      } else if (checked.includes(item)){
        if (allowCircular) addToOrder(item);
        else errorCircular(item);
        return;
        
       // If no requirements add item
       } else if (!required) {
        checked.push(item);
        addToOrder(item);
        return;
      
      // Continue looping
      } else {
        ++depth;
        checked.push(item);
        required.forEach(checkRequired);
        addToOrder(item); // Note: Only can be included if we allow circular
        --depth;
        return;
      }
    }

    function addToOrder(item) {
      if (order.includes(item)) return;
      order.push(item);
    }
    function errorCircular(item) {
      debug.error('LESS Dependency Order Error (circular dependency): The following item is required by an item that it itself or it\'s dependents require.', item);
      error = true;
      return false;
    }
    function errorMissing(item, currentDepth) {
      debug.error('LESS Dependency Order Error: Missing dependency: ' + chalk.red(item), 
      '(@depth '+ currentDepth + ')',
      '\nDebug trace: (depth | name) \n - ' + trace.join("\n - "));
      error = true;
      return false;
    }

    return error ? false : order;
  };
};

