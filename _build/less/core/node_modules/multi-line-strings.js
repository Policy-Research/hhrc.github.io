// =============================================================================
// Multi-line String Utilities
// =============================================================================

module.exports = {

  /* Indents all line breaks by spaces */
  indent: function(str, numOfIndents, opt_spacesPerIndent) {
    str = str.replace(/^(?=.)/gm, new Array(numOfIndents + 1).join('\t'));
    numOfIndents = new Array(opt_spacesPerIndent + 1 || 0).join(' '); // re-use
    return opt_spacesPerIndent ? 
      str.replace(/^\t+/g, function(tabs) {
          return tabs.replace(/./g, numOfIndents);
      }) : str;
  },

  /* Puts comments "// " at the beginning of all lines (except those that have it already) */
  commentAllLines: function(fileString) {
    var _this = this,
        lines = fileString.split("\n"),
        newLines = [];

    lines.forEach(function(line) {
      var trimResults = _this.trimStartCapture(line),
          trimmed = trimResults.trimmed;
      // Check if already commented, or if just a blank line (space only)
      if (trimResults.trimmed.startsWith("//") || !line.replace(/\s/g, '').length) {
        newLines.push(line);
      } else {
        newLines.push(trimResults.trimmings + "// " + trimmed); // Also add back in whitespace
      }
    });
    return newLines.join("\n"); // Return the string with line breaks again
  },

  /* Loops through string and returns object with trimmed, trimmings */
  trimStartCapture: function(string, trimChar) {
    trimChar = trimChar === undefined ? " " : trimChar;
    var startIndex = 0;
    while (string[startIndex] === trimChar) startIndex++;
    return {
      trimmed: string.substr(startIndex),
      trimmings: string.slice(0, startIndex),
      original: string
    };
  }
};